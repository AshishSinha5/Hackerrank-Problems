
/* C implementation QuickSort */
#include<stdio.h>

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
  
    int i=low+1,j=high,temp,m=arr[low];
     while(i<=j)
     {
              if(arr[i]<arr[low])
              {
                               i++;
              }
              if(arr[j]>arr[low])
              {
                               j--;                
              }
              if(i<=j)
              {
                  swap (&arr[i], &arr[j]);
              }
      }

     swap (&arr[low], &arr[j]);
    return j;
}

int quickSort(int arr[], int low, int high,int i)
{
            
   int m=arr[low];
     if(low==high)
    return m;
        int  q=partition(arr,low,high); 
  int k=q-low+1;
        
        
         if (i==k) 
             return arr[q];
    else{
        if(i<k)
            return quickSort(arr, low, q-1,i);
         else 
            return quickSort(arr, q+1, high,i-k);
    }

}
/*void printArray(int arr[],int start, int size)
{
    int i;
    for (i=start; i <= size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 */
int main()
{
    int n,arr[100];
    scanf("%d",&n);
    for(int i =0;i<n;i++){
        scanf("%d",&arr[i]);}
    
    printf("%d",quickSort(arr, 0, n-1,(n+1)/2));
 // printArray(arr,0,n-1);
    return 0;
}

