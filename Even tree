
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// A C program to demonstrate linked list based implementation of queue
 
// A linked list (LL) node to store a queue entry
struct QNode* newNode(int );
struct Queue *createQueue();

void enQueue(struct Queue* , int );
struct QNode *deQueue(struct Queue *);
struct AdjListNode* newAdjListNode(int );
struct Graph* createGraph(int );
void addEdge(struct Graph* , int , int );
 void BFS(struct Graph* ,int  );

struct QNode
{
    int key;
    struct QNode *next;
};
 
// The queue, front stores the front node of LL and rear stores ths
// last node of LL
struct Queue
{
    struct QNode *front, *rear;
};
// A utility function to create a new linked list node.
struct QNode* newNode(int k)
{
    struct QNode *temp = (struct QNode*)malloc(sizeof(struct QNode));
    temp->key = k;
    temp->next = NULL;
    return temp; 
}
 
// A utility function to create an empty queue
struct Queue *createQueue()
{
    struct Queue *q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}
 
// The function to add a key k to q
void enQueue(struct Queue *q, int k)
{
    // Create a new LL node
    struct QNode *temp = newNode(k);
 
    // If queue is empty, then new node is front and rear both
    if (q->rear == NULL)
    {
       q->front = q->rear = temp;
       return;
    }
 
    // Add the new node at the end of queue and change rear
    q->rear->next = temp;
    q->rear = temp;
}
 
// Function to remove a key from given queue q
struct QNode *deQueue(struct Queue *q)
{
    // If queue is empty, return NULL.
    if (q->front == NULL)
       return NULL;
 
    // Store previous front and move front one node ahead
    struct QNode *temp = q->front;
    q->front = q->front->next;
 
    // If front becomes NULL, then change rear also as NULL
    if (q->front == NULL)
       q->rear = NULL;
    return temp;
}
 
// A structure to represent an adjacency list node
struct AdjListNode
{
    int dest;
    struct AdjListNode* next;
};
 
// A structure to represent an adjacency list
struct AdjList
{
    struct AdjListNode *head;  // pointer to head node of list
};
 
// A structure to represent a graph. A graph is an array of adjacency lists.
// Size of array will be V (number of vertices in graph)
struct Graph
{
    int V;
    struct AdjList* array;
};
 
// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
 
// A utility function that creates a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;
 
    // Create an array of adjacency lists.  Size of array will be V
    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));
 
     // Initialize each adjacency list as empty by making head as NULL
    int i;
    for (i = 0; i < V; ++i)
        graph->array[i].head = NULL;
 
    return graph;
}
 
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest)
{
    // Add an edge from src to dest.  A new node is added to the adjacency
    // list of src.  The node is added at the begining
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
 
    // Since graph is undirected, add an edge from dest to src also
   /* newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;*/
}
 void BFS(struct Graph* graph,int s)
     {
     	
     int i;
     struct AdjListNode* j;
     struct AdjListNode* pCrawl;
     bool visited[graph->V];
     for(i=0;i<graph->V;i++)
         visited[i]=false;
     
     int distance[graph->V];
        for(i=0;i<graph->V;i++)
         distance[i]=-1; 
     
     int parent[graph->V];
        for(i=0;i<graph->V;i++)
         parent[i]=-1; 
     int c=0;
    struct Queue *q = createQueue();
     enQueue(q,s);
     visited[s]=true;
     distance[s]=0;
       while(q->front!=NULL)
    {
       
      
           // Dequeue a vertex from queue and print it
         struct QNode *n=deQueue(q);
          int v=n->key;
      // printf("D%d ",n->key);
		for(pCrawl = graph->array[v].head;pCrawl!=NULL;pCrawl = pCrawl->next)
		{
			//printf("-> %d", pCrawl->dest);
		
           if(!visited[(pCrawl->dest)])
            {
                visited[pCrawl->dest] = true;
                // printf("V(%d) N(%d)",visited[pCrawl->dest],pCrawl->dest);
               distance[pCrawl->dest]=distance[n->key]+6;
              // printf("D(%d) N(%d) ",distance[pCrawl->dest],pCrawl->dest);
               parent[pCrawl->dest]=n->key;
               //printf("P%d  N%d",parent[pCrawl->dest],pCrawl->dest);
                enQueue(q,pCrawl->dest);
            }
         	
         
     
     	printf("\n");
	               
      }
           
       }
     for( i=0;i<graph->V;i++){
         if(visited[i]==true)
             c++;
        	printf("c%d ",c);
     }}
int main()
{
   int V=10;
     struct Graph* graph = createGraph(V);
  addEdge(graph,0,1);
  addEdge(graph,0, 2);
  addEdge(graph,0, 5);
//addEdge(graph,1, 0); 
  addEdge(graph,1, 4);
  addEdge(graph,1, 6);
// addEdge(graph,2, 0);
 addEdge(graph,2, 3); 
// addEdge(graph,3, 2);// addEdge(graph,4, 1); 
//addEdge(graph,5, 0); 
  addEdge(graph,5, 7);
// addEdge(graph,6, 1);
// addEdge(graph,7, 5);
  addEdge(graph,7, 8);
  addEdge(graph,7,9);
//addEdge(graph,8, 7);
//  addEdge(graph,9, 7);
      BFS(graph,0);
     return 0;
}

 

